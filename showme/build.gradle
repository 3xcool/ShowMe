apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
//apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'


// ShowMe Version
def versionMajor = 2
def versionMinor = 1
def versionPatch = 3

def localProperties = new Properties()
localProperties.load(project.rootProject.file('mylocal.properties').newDataInputStream())

//Maven Central
ext {
    PUBLISH_GROUP_ID = 'com.3xcool'
    PUBLISH_VERSION = "${versionMajor}.${versionMinor}.${versionPatch}"
    PUBLISH_ARTIFACT_ID = 'showme'

    repoName = 'sonatype'

    libraryDescription = 'Powerful Logger Library'
    libraryUrl = 'https://github.com/3xcool/showme'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'

    developerId = '3xcool'
    developerName = 'Andre Filgueiras'
    developerEmail = 'alg.filgueiras@gmail.com'

    gitConnection = 'scm:git:github.com/3xcool/showme.git'
    developerConnection = 'scm:git:ssh://github.com/3xcool/showme.git'
    scmUrl = 'https://github.com/3xcool/showme'
}


android {
    compileSdkVersion 33

    signingConfigs {
        release {
            storeFile rootProject.file('filgs_key.keystore')
            storePassword localProperties.getProperty("signing.password")
            keyAlias localProperties.getProperty("signing.keyAlias")
            keyPassword localProperties.getProperty("signing.password")
        }

        debug {
            storeFile rootProject.file('filgs_key.keystore')
            storePassword localProperties.getProperty("signing.password")
            keyAlias localProperties.getProperty("signing.keyAlias")
            keyPassword localProperties.getProperty("signing.password")
        }
    }

    defaultConfig {
        minSdkVersion minVersion
        targetSdkVersion targetVersion
        versionCode versionMajor * 10000 + versionMinor * 100 + versionPatch
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        buildConfigField "String", "ShowMeVersionCode", "\"$versionCode\""
        buildConfigField "String", "ShowMeVersionName", "\"$versionName\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug{
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        buildConfig = true
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    //Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutineVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutineVersion"

    //Fileman
    implementation 'com.3xcool:fileman:2.2.2'

    //Gson
    implementation "com.google.code.gson:gson:$gsonVersion"

    //Kotlin reflection (get kotlin qualified name)
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.7.10"


    //Workmanager
    implementation "androidx.work:work-runtime-ktx:$workVersion"
}

task deleteJar(type: Delete) {
    delete 'libs/jars/showme.jar'
}

//tutorial to create jar: https://stackoverflow.com/questions/21712714/how-to-make-a-jar-out-from-an-android-studio-project
task createJar(type: Copy) {
//    from('build/intermediates/bundles/release/') //don't work
    from('build/intermediates/packaged-classes/release/')
    into('libs/jars/')
    include('classes.jar')
    rename('classes.jar', 'showme.jar')
}

createJar.dependsOn(deleteJar, build)



//apply from: "${rootProject.projectDir}/publish-mavencentral.gradle"
apply from: "publish-mavencentral.gradle"