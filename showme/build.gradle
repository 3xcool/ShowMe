apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.android.library'

def versionMajor = 1
def versionMinor = 2
def versionPatch = 17

android {
    compileSdkVersion 29


    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode versionMajor * 10000 + versionMinor * 100 + versionPatch
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'


    //Kotlin Coroutines
    def kotlinCoroutineVersion = "1.0.1"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutineVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutineVersion"

    //Fileman
    api 'com.github.3xcool:fileman:2.1.0'

    //Gson
    api 'com.google.code.gson:gson:2.8.6'

    //Kotlin reflection (get kotlin qualified name)
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.3.72"

    def work_version = "2.3.4"
    // Kotlin + coroutines
    api "androidx.work:work-runtime-ktx:$work_version"
}

task deleteJar(type: Delete) {
    delete 'libs/jars/showme.jar'
}

//tutorial to create jar: https://stackoverflow.com/questions/21712714/how-to-make-a-jar-out-from-an-android-studio-project
task createJar(type: Copy) {
//    from('build/intermediates/bundles/release/') //don't work
    from('build/intermediates/packaged-classes/release/')
    into('libs/jars/')
    include('classes.jar')
    rename('classes.jar', 'showme.jar')
}

createJar.dependsOn(deleteJar, build)