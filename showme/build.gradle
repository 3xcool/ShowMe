apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

def versionMajor = 2
def versionMinor = 0
def versionPatch = 1

def localProperties = new Properties()
localProperties.load(project.rootProject.file('mylocal.properties').newDataInputStream())

ext {
    bintrayRepo = 'maven' // Name of the Bintray repo you created
    bintrayName = 'com.3xcool.utility:showme' // Bintray package name

    publishedGroupId = 'com.3xcool.utility' // Group ID of the SDK which will be added in implementation line of gradle
    artifact = 'showme' // Artifact ID of the SDK which will be added in implementation line of gradle
    libraryVersion = '2.0.1' //versionMajor * 10000 + versionMinor * 100 + versionPatch  // Version of the library you created in Bintray

    libraryName = 'ShowMe' // It is generally the module name
    libraryDescription = 'Logger Library' // Small description of the library

    siteUrl = 'https://github.com/3xcool/showme'
    gitUrl = 'https://github.com/3xcool/showme'

    developerId = '3xcool'
    developerName = 'Andre Filgueiras'
    developerEmail = 'alg.filgueiras@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]

    //Bintray Credentials
    bintrayUsername = localProperties.getProperty('BINTRAY_USERNAME')
    bintrayUserOrg = localProperties.getProperty('BINTRAY_ORG')
    bintrayApiKey = localProperties.getProperty('BINTRAY_API_KEY')
}

android {
    compileSdkVersion 29


    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode versionMajor * 10000 + versionMinor * 100 + versionPatch
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug{
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    //Kotlin Coroutines
    def kotlinCoroutineVersion = "1.3.9"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutineVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutineVersion"

    //Fileman
    api 'com.3xcool.utility:fileman:2.1.4'

    //Gson
    api 'com.google.code.gson:gson:2.8.6'

    //Kotlin reflection (get kotlin qualified name)
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.4.10"


    //Workmanager
    def work_version = "2.4.0"
    api "androidx.work:work-runtime-ktx:$work_version"
}

task deleteJar(type: Delete) {
    delete 'libs/jars/showme.jar'
}

//tutorial to create jar: https://stackoverflow.com/questions/21712714/how-to-make-a-jar-out-from-an-android-studio-project
task createJar(type: Copy) {
//    from('build/intermediates/bundles/release/') //don't work
    from('build/intermediates/packaged-classes/release/')
    into('libs/jars/')
    include('classes.jar')
    rename('classes.jar', 'showme.jar')
}

createJar.dependsOn(deleteJar, build)


apply from: 'bintray.script'